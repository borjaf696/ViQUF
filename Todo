Moving into full representative representation - Donete via bcalm
- Revisar construccion de cliques por que parece que soy yo el que mezcla la informacion. - está bien
- Hacer el ejemplo a mano - donette
- Probar intersección de información de emparejados entre nodos "en el mismo plano" y descartar aquella información que sea totalmente irrelevante.
    * Idea - descartar información que realmente no pinte nada
    * Next - coger para la pareja A - B solo la información (P(A) - P(N(A) - B)) U (P(B) - P(IN(B) - A))
- Filegree edges - We denote the coverage of an edge e in the assembly graph as cov(e) and define the coverage cov(v) of
 a vertex v as the maximum of cov(e) over all edges e incident to v. Given an edge e incident to a vertex v and a threshold
 ratio (the default value is 10), a vertex v predominates an edge e if its coverage is significantly higher than the coverage
 of the edge e; that is, if ratio · cov(e) < cov(v). An edge (v,w) is weak if it is predominated by either v or w.
 - Arreglar cliques (REVISAR)
    - Hacer la parte de añadir las frecuencias de las aristas.
 - Chequear intersecciones por que creo que alguna debe ir mal - no cuadran los resultados para el 670.
 - Revisar el DAG
 - Corregir el flow - to path (añadir sources y sink globales con flujo igual a la suma del flujo saliente de todos los nodos con los que conecta).
 - Antes de nada ver como es la distribución de frecuencias.
 - Polishing - eliminar los emparejados más frecuentes, es probable que pertenezcan a varios y estén liando el ensamblaje posterior
    (ojo hacerlo a nivel global y no individual) - tiene buena pinta

 - Mirar el LCL tratar de usar la varianza (probar versión media < 2*sigma? Podemos asumir algo así pensando en que si la media < 2*sigma entonces no es significativo)
 - Púlido local - queda pendiente el post_process_pairs por que creo que puede no ser necesario (mirar versión global)
 - gfa del grafo local que creo para el nodo que estoy mirando - tratar de descubrir si tiene o no sentido para nuestro caso de estudio (Pending).
 - REVISAR CAMINOS NF - reachability - ¿guardar la longitud del camino? No me parece muy escalable
 - REVISAR FLAGS - (TRIAL)
 - Revisar frecuencias de aristas - están mal - done! Fallo de reportado ahora están correctos.
 - REVISAR: bit-vector para emparejamientos erróneos. ¿Ocurren frecuentemente?

 **HISTOGRAMAS LEENA + CORRECCIÓN SUBSETS** - Done
 ** CORRECCIÓN TAILS NETWORK FLOWS **
 - Agregar el comportamiento según el behaviour - nop no funciona
 - Eliminar la basura que hay montada de los in_nodes y usar las frequencias acumuladas: fijarse en el caso del nodo 13. Tiene dos padres 1 verídico y 1 que no nos
 interesa que aporta 1300 de flujo si lo eliminamos (el flujo cuando recorremos) nos quedamos con un flujo de 700 en el nodo de interés! Hay que eliminar
 los inflows que no nos interesan.
 - Tratar de pulir el grafo (apdbg) - una vez hayamos asegurado que el resto de cosas van bien! No quiero depender del pulido como paso clave.

 ** Hay que limpiar este codigo **
 ** Preparar para metagenomica **
 ** Corregir el tema de la asignación de flujos teniendo en cuenta que el flujo del vecino puede ser mucho menor que los disponibles en las flujos acumulados **
 ** Flujos - readjust, probar, antes de usar el primer elemento cuando no haya ajuste válido, con la frecuencia de la hebra actual.

 ** Computar aristas transitivas en el grafo:
    * A -> B,C,D
    * Para todo n in neighs(A):
        * Para todo n2 in neighs(A):
            if n = n2:
                continue
            if reach(n,n2):
                remove(A,n)
    * En resumen si un nodo hijo es alcanzable a través del resto de hijos entonces eliminamos dicha arista.

### Redo Reajuste
 ** Usar versión de expresiones overleaf, la idea es distribuir de manera que produzcamos el mínimo error en la distribución de los valores. (done)
 ** Usar la información de emparejados para tratar de simplificar la asociación de padres en las secciones divergentes.
 ** Hay que cuidar el hecho de que se puede llegar varias veces a un nodo X - Si se llega varias veces solo se recorren de nuevo las hebras que tienen remain_flow 
 (igual debería ser máxima esto y solo recorrer las hebras que tienen remain_flow > 0). Implementar y ver si efectivamente es esto. (done)
 ** Añadir un diccionario por nodo estudiado (aquel en el que se haya hecho una distribución de in_flows) que guarde el in_flow de los padres asignados y los padres asignados. 
 ¿Nos quedamos con la última asignación? Probemos a ver que tal (done) - Corrección: si alcance múltiple guardamos de que padre venimos y eliminamos al padre de dicho nodo.(done)
 ** Usar al padre de la hebra para tratar de apoyar nuestras decisiones.
 ** TESTEAR
 ** IMPORTANTE
 ** Nos movemos a una aproximación greedy:
    ** Si el padre de la hebra (strain_parent) apunta a uno de los vecinos pero no al resto entonces mandamos el flujo directamente por ahí - offset[neigh] = strain_freq_update
    ** Sino hay asignación de paired_end - aproximación regular via distribución
    ** Si hay información de paired_end:
        ** Si la asignación parent-neigh es única y |freq(neigh) - freq(in_parent)| < error entonces mandamos todo el flujo del padre por dicha hebra
        ** Si la asignación parent-neigh no es única o si siendo única la frecuencia del padre es muy superior a la del hijo entonces asumimos que el padre divide y por tanto las 
        asignaciones no serán exactas, es decir, que igual que existe exceso en un lado existirá deficit en otro. Para solventar este problema replanteamos el problema de la 
        distribución vía las frecuencias restantes todavía no asignadas.
** Cambio añadido de versiones completas en lugar de versiones vacías de los nodos.
** Nueva modificación - cuando exista el caso de que un in_parent apunta a algun vecino automáticamente asignar MIN_PATH_FLOW de ese padre a ese hijo. Recordar que luego habría que 
incrementar ese flujo en caso de que hubiese otra asignación.
// TESTING
** Intentar la aproximación full greedy
** CORREGIR MCP GENERAL - Que pasa con las cadenas únicas.
// añadido
** No nos basamos solo en los vecinos directos sino que usamos también los vecinos de los vecinos para hacer el emparejamiento de las pe. Pero ojo si el in_degree de estos es > 1, no
lo agregamos. Eso puede producir errores. CHEQUEAR y tratar de corregir las frecuencias.
** El padre de la hebra es el primer vecino de esa hebra bajo estudio.
** Eliminamos los round - necesitamos precisión
** Cambiar a frecuencias de la conexión el flujo
** Homogeneizar los flujos de las regiones extremas del adbg (nah)
** Tratar los nodos con pe como subconjuntos (esperar que el mcp posterior reorganice como debe) siempre que uno tenga salida 0 y el otro entrada 0 y su pe sean subconjuntos


// CORRECCIONES
** Revisar y eliminar partes inservibles en el código, secciones que en la actualidad nunca se pasa por ellas.